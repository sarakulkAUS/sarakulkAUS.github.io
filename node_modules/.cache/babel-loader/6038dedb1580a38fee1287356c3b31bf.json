{"ast":null,"code":"/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nconst ErrorCodes = require('./utils/SDKErrors').codes;\n\nconst {\n  AEM_GRAPHQL_ACTIONS\n} = require('./utils/config');\n\nconst {\n  REQUEST_ERROR,\n  RESPONSE_ERROR,\n  API_ERROR,\n  INVALID_PARAM\n} = ErrorCodes;\n/**\n * This class provides methods to call AEM GraphQL APIs.\n * Before calling any method initialize the instance\n * with GraphQL endpoint, GraphQL serviceURL and auth if needed\n */\n\nclass AEMHeadless {\n  /**\n   * Constructor.\n   *\n   * If param is a string, it's treated as AEM server URL, default GraphQL endpoint is used.\n   * For granular params, use config object\n   *\n   * @param {string|object} config - Configuration object, or AEM server URL string\n   * @param {string} [config.serviceURL] - AEM server URL\n   * @param {string} [config.endpoint] - GraphQL endpoint\n   * @param {(string|Array)} [config.auth] - Bearer token string or [user,pass] pair array\n   * @param {object} [config.fetch] - custom Fetch instance\n   */\n  constructor(config) {\n    let endpoint = AEM_GRAPHQL_ACTIONS.endpoint;\n    let serviceURL = AEM_GRAPHQL_ACTIONS.serviceURL;\n\n    if (typeof config === 'string') {\n      serviceURL = config;\n    } else {\n      serviceURL = config.serviceURL || serviceURL;\n      endpoint = config.endpoint || endpoint;\n      this.auth = config.auth;\n    }\n\n    this.serviceURL = this.__getDomain(serviceURL);\n    this.endpoint = this.__getPath(endpoint);\n    this.fetch = this.__getFetch(config.fetch);\n  }\n  /**\n   * Returns a Promise that resolves with a POST request JSON data.\n   *\n   * @param {string} query - the query string\n   * @param {object} [options={}] - additional POST request options\n   * @param {object} [retryOptions={}] - retry options for @adobe/aio-lib-core-networking\n   * @returns {Promise<any>} - the response body wrapped inside a Promise\n   */\n\n\n  async runQuery(query) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let retryOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.__handleRequest(this.endpoint, JSON.stringify({\n      query\n    }), options, retryOptions);\n  }\n  /**\n   * Returns a Promise that resolves with a PUT request JSON data.\n   *\n   * @param {string} query - the query string\n   * @param {string} path - AEM path to save query, format: configuration_name/endpoint_name\n   * @param {object} [options={}] - additional PUT request options\n   * @param {object} [retryOptions={}] - retry options for @adobe/aio-lib-core-networking\n   * @returns {Promise<any>} - the response body wrapped inside a Promise\n   */\n\n\n  async persistQuery(query, path) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let retryOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const url = `${AEM_GRAPHQL_ACTIONS.persist}/${path}`;\n    return this.__handleRequest(url, query, {\n      method: 'PUT',\n      ...options\n    }, retryOptions);\n  }\n  /**\n   * Returns a Promise that resolves with a GET request JSON data.\n   *\n   * @param {object} [options={}] - additional GET request options\n   * @param {object} [retryOptions={}] - retry options for @adobe/aio-lib-core-networking\n   * @returns {Promise<any>} - the response body wrapped inside a Promise\n   */\n\n\n  async listPersistedQueries() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let retryOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const url = `${AEM_GRAPHQL_ACTIONS.list}`;\n    return this.__handleRequest(url, '', {\n      method: 'GET',\n      ...options\n    }, retryOptions);\n  }\n  /**\n   * Returns a Promise that resolves with a GET request JSON data.\n   *\n   * @param {string} path - AEM path for persisted query, format: configuration_name/endpoint_name\n   * @param {object} [variables={}] - query variables\n   * @param {object} [options={}] - additional GET request options\n   * @param {object} [retryOptions={}] - retry options for @adobe/aio-lib-core-networking\n   * @returns {Promise<any>} - the response body wrapped inside a Promise\n   */\n\n\n  async runPersistedQuery(path) {\n    let variables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let retryOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const method = (options.method || 'GET').toUpperCase();\n    let body = '';\n    let variablesString = encodeURIComponent(Object.keys(variables).map(key => `;${key}=${variables[key]}`).join(''));\n\n    if (method === 'POST') {\n      body = JSON.stringify({\n        variables\n      });\n      variablesString = '';\n    }\n\n    const url = `${AEM_GRAPHQL_ACTIONS.execute}/${path}${variablesString}`;\n    return this.__handleRequest(url, body, {\n      method,\n      ...options\n    }, retryOptions);\n  }\n  /**\n   * Returns Authorization Header value.\n   *\n   * @private\n   * @param {string|array} auth - Bearer token string or [user,pass] pair array\n   * @returns {string} Authorization Header value\n   */\n\n\n  __getAuthHeader(auth) {\n    let authType = 'Bearer';\n    let authToken = auth; // If auth is user, pass pair\n\n    if (Array.isArray(auth) && auth[0] && auth[1]) {\n      authType = 'Basic';\n      authToken = Buffer.from(`${auth[0]}:${auth[1]}`, 'utf8').toString('base64');\n    }\n\n    return `${authType} ${authToken}`;\n  }\n  /**\n   * Returns an object for Request options\n   *\n   * @private\n   * @param {string} [body] - Request body (the query string)\n   * @param {object} [options] Additional Request options\n   * @returns {object} the Request options object\n   */\n\n\n  __getRequestOptions(body, options) {\n    const {\n      method = 'POST'\n    } = options;\n    const requestOptions = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    if (this.auth) {\n      requestOptions.headers = { ...requestOptions.headers,\n        Authorization: this.__getAuthHeader(this.auth)\n      };\n      requestOptions.credentials = 'include';\n    }\n\n    return {\n      method,\n      ...(body ? {\n        body\n      } : {}),\n      ...requestOptions,\n      ...options\n    };\n  }\n  /**\n   * Returns a Promise that resolves with a PUT request JSON data.\n   *\n   * @private\n   * @param {string} endpoint - Request endpoint\n   * @param {string} [body=''] - Request body (the query string)\n   * @param {object} [options={}] - Request options\n   * @param {object} [retryOptions={}] - retry options for @adobe/aio-lib-core-networking\n   * @returns {Promise<any>} the response body wrapped inside a Promise\n   */\n\n\n  async __handleRequest(endpoint, body, options, retryOptions) {\n    const requestOptions = this.__getRequestOptions(body, options);\n\n    const url = this.__getUrl(this.serviceURL, endpoint);\n\n    this.__validateUrl(url);\n\n    let response; // 1. Handle Request\n\n    try {\n      response = await this.fetch(url, requestOptions, retryOptions);\n    } catch (error) {\n      // 1.1 Request error: general\n      throw new REQUEST_ERROR({\n        sdkDetails: {\n          serviceURL: this.serviceURL,\n          endpoint\n        },\n        messageValues: error.message\n      });\n    }\n\n    let apiError; // 2. Handle Response error\n\n    if (!response.ok) {\n      try {\n        // 2.1 Check if custom error is returned\n        apiError = await response.json();\n      } catch (error) {\n        // 2.3 Response error: Couldn't parse JSON - no error defined in API response\n        throw new RESPONSE_ERROR({\n          sdkDetails: {\n            serviceURL: this.serviceURL,\n            endpoint\n          },\n          messageValues: error.message\n        });\n      }\n    }\n\n    if (apiError) {\n      // 2.2 Response error: JSON parsed - valid error defined in API response\n      throw new API_ERROR({\n        sdkDetails: {\n          serviceURL: this.serviceURL,\n          endpoint\n        },\n        messageValues: apiError\n      });\n    } // 3. Handle ok response\n\n\n    let data;\n\n    try {\n      data = await response.json();\n    } catch (error) {\n      // 3.2. Response ok: Data error - Couldn't parse the JSON from OK response\n      throw new RESPONSE_ERROR({\n        sdkDetails: {\n          serviceURL: this.serviceURL,\n          endpoint\n        },\n        messageValues: error.message\n      });\n    }\n\n    return data;\n  }\n  /**\n   * Returns valid url.\n   *\n   * @private\n   * @param {string} domain\n   * @param {string} path\n   * @returns {string} valid url\n   */\n\n\n  __getUrl(domain, path) {\n    return `${domain}${path}`;\n  }\n  /**\n   * Removes first / in a path\n   *\n   * @private\n   * @param {string} path\n   * @returns {string} path\n   */\n\n\n  __getPath(path) {\n    return path[0] === '/' ? path.substring(1) : path;\n  }\n  /**\n   * Add last / in domain\n   *\n   * @private\n   * @param {string} domain\n   * @returns {string} valid domain\n   */\n\n\n  __getDomain(domain) {\n    return domain[domain.length - 1] === '/' ? domain : `${domain}/`;\n  }\n  /**\n   * get Fetch instance\n   *\n   * @private\n   * @param {object} [fetch]\n   * @returns {object} fetch instance\n   */\n\n\n  __getFetch(fetch) {\n    if (!fetch) {\n      const browserFetch = this.__getBrowserFetch();\n\n      if (!browserFetch) {\n        throw new INVALID_PARAM({\n          sdkDetails: {\n            serviceURL: this.serviceURL\n          },\n          messageValues: 'Required param missing: config.fetch'\n        });\n      }\n\n      return browserFetch;\n    }\n\n    return fetch;\n  }\n  /**\n   * get Browser Fetch instance\n   *\n   * @private\n   * @returns {object} fetch instance\n   */\n\n\n  __getBrowserFetch() {\n    if (typeof window !== 'undefined') {\n      return window.fetch.bind(window);\n    }\n\n    if (typeof self !== 'undefined') {\n      return self.fetch.bind(self); // eslint-disable-line\n    }\n\n    return null;\n  }\n  /**\n   * Check valid url or absolute path\n   *\n   * @private\n   * @param {string} url\n   * @returns void\n   */\n\n\n  __validateUrl(url) {\n    const fullUrl = url[0] === '/' ? `https://domain${url}` : url;\n\n    try {\n      new URL(fullUrl); // eslint-disable-line\n    } catch (e) {\n      throw new INVALID_PARAM({\n        sdkDetails: {\n          serviceURL: this.serviceURL\n        },\n        messageValues: `Invalid URL/path: ${url}`\n      });\n    }\n  }\n\n}\n\nmodule.exports = AEMHeadless;\nmodule.exports.AEMHeadless = AEMHeadless;\nmodule.exports.ErrorCodes = ErrorCodes;","map":{"version":3,"names":["ErrorCodes","require","codes","AEM_GRAPHQL_ACTIONS","REQUEST_ERROR","RESPONSE_ERROR","API_ERROR","INVALID_PARAM","AEMHeadless","constructor","config","endpoint","serviceURL","auth","__getDomain","__getPath","fetch","__getFetch","runQuery","query","options","retryOptions","__handleRequest","JSON","stringify","persistQuery","path","url","persist","method","listPersistedQueries","list","runPersistedQuery","variables","toUpperCase","body","variablesString","encodeURIComponent","Object","keys","map","key","join","execute","__getAuthHeader","authType","authToken","Array","isArray","Buffer","from","toString","__getRequestOptions","requestOptions","headers","Authorization","credentials","__getUrl","__validateUrl","response","error","sdkDetails","messageValues","message","apiError","ok","json","data","domain","substring","length","browserFetch","__getBrowserFetch","window","bind","self","fullUrl","URL","e","module","exports"],"sources":["C:/sarang/code/spa/react-project/aem-guides-wknd-graphql/react-app/node_modules/@adobe/aem-headless-client-js/src/index.js"],"sourcesContent":["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nconst ErrorCodes = require('./utils/SDKErrors').codes\nconst { AEM_GRAPHQL_ACTIONS } = require('./utils/config')\nconst { REQUEST_ERROR, RESPONSE_ERROR, API_ERROR, INVALID_PARAM } = ErrorCodes\n\n/**\n * This class provides methods to call AEM GraphQL APIs.\n * Before calling any method initialize the instance\n * with GraphQL endpoint, GraphQL serviceURL and auth if needed\n */\nclass AEMHeadless {\n  /**\n   * Constructor.\n   *\n   * If param is a string, it's treated as AEM server URL, default GraphQL endpoint is used.\n   * For granular params, use config object\n   *\n   * @param {string|object} config - Configuration object, or AEM server URL string\n   * @param {string} [config.serviceURL] - AEM server URL\n   * @param {string} [config.endpoint] - GraphQL endpoint\n   * @param {(string|Array)} [config.auth] - Bearer token string or [user,pass] pair array\n   * @param {object} [config.fetch] - custom Fetch instance\n   */\n  constructor (config) {\n    let endpoint = AEM_GRAPHQL_ACTIONS.endpoint\n    let serviceURL = AEM_GRAPHQL_ACTIONS.serviceURL\n\n    if (typeof config === 'string') {\n      serviceURL = config\n    } else {\n      serviceURL = config.serviceURL || serviceURL\n      endpoint = config.endpoint || endpoint\n      this.auth = config.auth\n    }\n\n    this.serviceURL = this.__getDomain(serviceURL)\n    this.endpoint = this.__getPath(endpoint)\n    this.fetch = this.__getFetch(config.fetch)\n  }\n\n  /**\n   * Returns a Promise that resolves with a POST request JSON data.\n   *\n   * @param {string} query - the query string\n   * @param {object} [options={}] - additional POST request options\n   * @param {object} [retryOptions={}] - retry options for @adobe/aio-lib-core-networking\n   * @returns {Promise<any>} - the response body wrapped inside a Promise\n   */\n  async runQuery (query, options = {}, retryOptions = {}) {\n    return this.__handleRequest(this.endpoint, JSON.stringify({ query }), options, retryOptions)\n  }\n\n  /**\n   * Returns a Promise that resolves with a PUT request JSON data.\n   *\n   * @param {string} query - the query string\n   * @param {string} path - AEM path to save query, format: configuration_name/endpoint_name\n   * @param {object} [options={}] - additional PUT request options\n   * @param {object} [retryOptions={}] - retry options for @adobe/aio-lib-core-networking\n   * @returns {Promise<any>} - the response body wrapped inside a Promise\n   */\n  async persistQuery (query, path, options = {}, retryOptions = {}) {\n    const url = `${AEM_GRAPHQL_ACTIONS.persist}/${path}`\n    return this.__handleRequest(url, query, { method: 'PUT', ...options }, retryOptions)\n  }\n\n  /**\n   * Returns a Promise that resolves with a GET request JSON data.\n   *\n   * @param {object} [options={}] - additional GET request options\n   * @param {object} [retryOptions={}] - retry options for @adobe/aio-lib-core-networking\n   * @returns {Promise<any>} - the response body wrapped inside a Promise\n   */\n  async listPersistedQueries (options = {}, retryOptions = {}) {\n    const url = `${AEM_GRAPHQL_ACTIONS.list}`\n    return this.__handleRequest(url, '', { method: 'GET', ...options }, retryOptions)\n  }\n\n  /**\n   * Returns a Promise that resolves with a GET request JSON data.\n   *\n   * @param {string} path - AEM path for persisted query, format: configuration_name/endpoint_name\n   * @param {object} [variables={}] - query variables\n   * @param {object} [options={}] - additional GET request options\n   * @param {object} [retryOptions={}] - retry options for @adobe/aio-lib-core-networking\n   * @returns {Promise<any>} - the response body wrapped inside a Promise\n   */\n\n  async runPersistedQuery (path, variables = {}, options = {}, retryOptions = {}) {\n    const method = (options.method || 'GET').toUpperCase()\n    let body = ''\n    let variablesString = encodeURIComponent(Object.keys(variables).map(key => `;${key}=${(variables[key])}`).join(''))\n\n    if (method === 'POST') {\n      body = JSON.stringify({ variables })\n      variablesString = ''\n    }\n\n    const url = `${AEM_GRAPHQL_ACTIONS.execute}/${path}${variablesString}`\n    return this.__handleRequest(url, body, { method, ...options }, retryOptions)\n  }\n\n  /**\n   * Returns Authorization Header value.\n   *\n   * @private\n   * @param {string|array} auth - Bearer token string or [user,pass] pair array\n   * @returns {string} Authorization Header value\n   */\n  __getAuthHeader (auth) {\n    let authType = 'Bearer'\n    let authToken = auth\n    // If auth is user, pass pair\n    if (Array.isArray(auth) && auth[0] && auth[1]) {\n      authType = 'Basic'\n      authToken = Buffer.from(`${auth[0]}:${auth[1]}`, 'utf8').toString('base64')\n    }\n\n    return `${authType} ${authToken}`\n  }\n\n  /**\n   * Returns an object for Request options\n   *\n   * @private\n   * @param {string} [body] - Request body (the query string)\n   * @param {object} [options] Additional Request options\n   * @returns {object} the Request options object\n   */\n  __getRequestOptions (body, options) {\n    const { method = 'POST' } = options\n\n    const requestOptions = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n\n    if (this.auth) {\n      requestOptions.headers = {\n        ...requestOptions.headers,\n        Authorization: this.__getAuthHeader(this.auth)\n      }\n      requestOptions.credentials = 'include'\n    }\n\n    return {\n      method,\n      ...body ? { body } : {},\n      ...requestOptions,\n      ...options\n    }\n  }\n\n  /**\n   * Returns a Promise that resolves with a PUT request JSON data.\n   *\n   * @private\n   * @param {string} endpoint - Request endpoint\n   * @param {string} [body=''] - Request body (the query string)\n   * @param {object} [options={}] - Request options\n   * @param {object} [retryOptions={}] - retry options for @adobe/aio-lib-core-networking\n   * @returns {Promise<any>} the response body wrapped inside a Promise\n   */\n  async __handleRequest (endpoint, body, options, retryOptions) {\n    const requestOptions = this.__getRequestOptions(body, options)\n    const url = this.__getUrl(this.serviceURL, endpoint)\n    this.__validateUrl(url)\n\n    let response\n    // 1. Handle Request\n    try {\n      response = await this.fetch(url, requestOptions, retryOptions)\n    } catch (error) {\n      // 1.1 Request error: general\n      throw new REQUEST_ERROR({\n        sdkDetails: {\n          serviceURL: this.serviceURL,\n          endpoint\n        },\n        messageValues: error.message\n      })\n    }\n    let apiError\n    // 2. Handle Response error\n    if (!response.ok) {\n      try {\n        // 2.1 Check if custom error is returned\n        apiError = await response.json()\n      } catch (error) {\n        // 2.3 Response error: Couldn't parse JSON - no error defined in API response\n        throw new RESPONSE_ERROR({\n          sdkDetails: {\n            serviceURL: this.serviceURL,\n            endpoint\n          },\n          messageValues: error.message\n        })\n      }\n    }\n\n    if (apiError) {\n      // 2.2 Response error: JSON parsed - valid error defined in API response\n      throw new API_ERROR({\n        sdkDetails: {\n          serviceURL: this.serviceURL,\n          endpoint\n        },\n        messageValues: apiError\n      })\n    }\n    // 3. Handle ok response\n    let data\n    try {\n      data = await response.json()\n    } catch (error) {\n      // 3.2. Response ok: Data error - Couldn't parse the JSON from OK response\n      throw new RESPONSE_ERROR({\n        sdkDetails: {\n          serviceURL: this.serviceURL,\n          endpoint\n        },\n        messageValues: error.message\n      })\n    }\n\n    return data\n  }\n\n  /**\n   * Returns valid url.\n   *\n   * @private\n   * @param {string} domain\n   * @param {string} path\n   * @returns {string} valid url\n   */\n  __getUrl (domain, path) {\n    return `${domain}${path}`\n  }\n\n  /**\n   * Removes first / in a path\n   *\n   * @private\n   * @param {string} path\n   * @returns {string} path\n   */\n  __getPath (path) {\n    return path[0] === '/' ? path.substring(1) : path\n  }\n\n  /**\n   * Add last / in domain\n   *\n   * @private\n   * @param {string} domain\n   * @returns {string} valid domain\n   */\n  __getDomain (domain) {\n    return domain[domain.length - 1] === '/' ? domain : `${domain}/`\n  }\n\n  /**\n   * get Fetch instance\n   *\n   * @private\n   * @param {object} [fetch]\n   * @returns {object} fetch instance\n   */\n  __getFetch (fetch) {\n    if (!fetch) {\n      const browserFetch = this.__getBrowserFetch()\n      if (!browserFetch) {\n        throw new INVALID_PARAM({\n          sdkDetails: {\n            serviceURL: this.serviceURL\n          },\n          messageValues: 'Required param missing: config.fetch'\n        })\n      }\n\n      return browserFetch\n    }\n\n    return fetch\n  }\n\n  /**\n   * get Browser Fetch instance\n   *\n   * @private\n   * @returns {object} fetch instance\n   */\n  __getBrowserFetch () {\n    if (typeof window !== 'undefined') {\n      return window.fetch.bind(window)\n    }\n\n    if (typeof self !== 'undefined') {\n      return self.fetch.bind(self) // eslint-disable-line\n    }\n\n    return null\n  }\n\n  /**\n   * Check valid url or absolute path\n   *\n   * @private\n   * @param {string} url\n   * @returns void\n   */\n  __validateUrl (url) {\n    const fullUrl = url[0] === '/' ? `https://domain${url}` : url\n\n    try {\n      new URL(fullUrl) // eslint-disable-line\n    } catch (e) {\n      throw new INVALID_PARAM({\n        sdkDetails: {\n          serviceURL: this.serviceURL\n        },\n        messageValues: `Invalid URL/path: ${url}`\n      })\n    }\n  }\n}\n\nmodule.exports = AEMHeadless\nmodule.exports.AEMHeadless = AEMHeadless\nmodule.exports.ErrorCodes = ErrorCodes\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}