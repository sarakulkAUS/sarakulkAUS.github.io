{"ast":null,"code":"/*\r\nCopyright 2022 Adobe\r\nAll Rights Reserved.\r\n\r\nNOTICE: Adobe permits you to use, modify, and distribute this file in\r\naccordance with the terms of the Adobe license agreement accompanying\r\nit.\r\n*/\n\n/**\r\n * persistedQueries.js - provides a wrapper utility of persisted queries that are expected to be available on the AEM environment\r\n */\nimport { aemHeadlessClient, mapErrors } from \"./headlessClient\";\n/**\r\n * Queries a list of all Adventures using the persisted path \"wknd-all/adventures-all\"\r\n * @returns {data, errors}\r\n */\n\nexport const getAllAdventures = async function () {\n  return executePersistedQuery('wknd-all/adventures-all');\n};\n/**\r\n * Filters a list of adventures by activity \r\n * using the persisted path 'wknd-all/adventures-by-activity'\r\n * @param {*} activityType \r\n * @returns \r\n */\n\nexport const getAdventuresByActivity = async function (activityType) {\n  const queryVariables = {\n    'activity': activityType\n  }; // expected query variables\n\n  return executePersistedQuery('wknd-all/adventures-by-activity', queryVariables);\n};\n/**\r\n * Queries a single adventure based on a path to a content fragment\r\n * uses persisted path 'wknd-all/adventures-by-path'\r\n * @param {*} adventurePath \r\n * @returns \r\n */\n\nexport const getAdventureByPath = async function (adventurePath) {\n  const queryVariables = {\n    'adventurePath': adventurePath\n  };\n  return executePersistedQuery('wknd-all/adventure-by-path', queryVariables);\n};\n/**\r\n * Uses the AEM Headless SDK to execute a query besed on a persistedQueryPath and optional query variables\r\n * @param {*} persistedQueryPath \r\n * @param {*} queryVariables \r\n * @returns \r\n */\n\nconst executePersistedQuery = async function (persistedQueryPath, queryVariables) {\n  let data;\n  let errors;\n\n  try {\n    // AEM GraphQL queries are asynchronous, either await their return or use Promise-based .then(..) { ... } syntax\n    const response = await aemHeadlessClient.runPersistedQuery(persistedQueryPath, queryVariables); // The GraphQL data is stored on the response's data field\n\n    data = response.data;\n    errors = response.errors ? mapErrors(response.errors) : undefined;\n  } catch (e) {\n    console.error(e.toJSON());\n    errors = e;\n  }\n\n  return {\n    data,\n    errors\n  };\n};","map":{"version":3,"names":["aemHeadlessClient","mapErrors","getAllAdventures","executePersistedQuery","getAdventuresByActivity","activityType","queryVariables","getAdventureByPath","adventurePath","persistedQueryPath","data","errors","response","runPersistedQuery","undefined","e","console","error","toJSON"],"sources":["C:/sarang/code/spa/react-project/aem-guides-wknd-graphql/react-app/src/api/persistedQueries.js"],"sourcesContent":["/*\r\nCopyright 2022 Adobe\r\nAll Rights Reserved.\r\n\r\nNOTICE: Adobe permits you to use, modify, and distribute this file in\r\naccordance with the terms of the Adobe license agreement accompanying\r\nit.\r\n*/\r\n\r\n/**\r\n * persistedQueries.js - provides a wrapper utility of persisted queries that are expected to be available on the AEM environment\r\n */\r\n import { aemHeadlessClient , mapErrors} from \"./headlessClient\";\r\n\r\n /**\r\n  * Queries a list of all Adventures using the persisted path \"wknd-all/adventures-all\"\r\n  * @returns {data, errors}\r\n  */\r\n export const getAllAdventures = async function() {\r\n     return executePersistedQuery('wknd-all/adventures-all');\r\n }\r\n \r\n /**\r\n  * Filters a list of adventures by activity \r\n  * using the persisted path 'wknd-all/adventures-by-activity'\r\n  * @param {*} activityType \r\n  * @returns \r\n  */\r\n export const getAdventuresByActivity = async function(activityType) {\r\n     const queryVariables = { 'activity': activityType }; // expected query variables\r\n     return executePersistedQuery('wknd-all/adventures-by-activity', queryVariables);\r\n }\r\n \r\n /**\r\n  * Queries a single adventure based on a path to a content fragment\r\n  * uses persisted path 'wknd-all/adventures-by-path'\r\n  * @param {*} adventurePath \r\n  * @returns \r\n  */\r\n export const getAdventureByPath = async function(adventurePath) {\r\n     const queryVariables = {'adventurePath': adventurePath};\r\n     return executePersistedQuery('wknd-all/adventure-by-path', queryVariables);\r\n }\r\n \r\n /**\r\n  * Uses the AEM Headless SDK to execute a query besed on a persistedQueryPath and optional query variables\r\n  * @param {*} persistedQueryPath \r\n  * @param {*} queryVariables \r\n  * @returns \r\n  */\r\n  const executePersistedQuery = async function(persistedQueryPath, queryVariables) {\r\n \r\n     let data;\r\n     let errors;\r\n \r\n     try {\r\n         // AEM GraphQL queries are asynchronous, either await their return or use Promise-based .then(..) { ... } syntax\r\n         const response = await aemHeadlessClient.runPersistedQuery(persistedQueryPath, queryVariables);\r\n         // The GraphQL data is stored on the response's data field\r\n         data = response.data;\r\n         errors = response.errors ? mapErrors(response.errors) : undefined;\r\n     } catch (e) {\r\n         console.error(e.toJSON());\r\n         errors = e;\r\n     }\r\n \r\n     return {data, errors}; \r\n }"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACC,SAASA,iBAAT,EAA6BC,SAA7B,QAA6C,kBAA7C;AAEA;AACD;AACA;AACA;;AACC,OAAO,MAAMC,gBAAgB,GAAG,kBAAiB;EAC7C,OAAOC,qBAAqB,CAAC,yBAAD,CAA5B;AACH,CAFM;AAIP;AACD;AACA;AACA;AACA;AACA;;AACC,OAAO,MAAMC,uBAAuB,GAAG,gBAAeC,YAAf,EAA6B;EAChE,MAAMC,cAAc,GAAG;IAAE,YAAYD;EAAd,CAAvB,CADgE,CACX;;EACrD,OAAOF,qBAAqB,CAAC,iCAAD,EAAoCG,cAApC,CAA5B;AACH,CAHM;AAKP;AACD;AACA;AACA;AACA;AACA;;AACC,OAAO,MAAMC,kBAAkB,GAAG,gBAAeC,aAAf,EAA8B;EAC5D,MAAMF,cAAc,GAAG;IAAC,iBAAiBE;EAAlB,CAAvB;EACA,OAAOL,qBAAqB,CAAC,4BAAD,EAA+BG,cAA/B,CAA5B;AACH,CAHM;AAKP;AACD;AACA;AACA;AACA;AACA;;AACE,MAAMH,qBAAqB,GAAG,gBAAeM,kBAAf,EAAmCH,cAAnC,EAAmD;EAE9E,IAAII,IAAJ;EACA,IAAIC,MAAJ;;EAEA,IAAI;IACA;IACA,MAAMC,QAAQ,GAAG,MAAMZ,iBAAiB,CAACa,iBAAlB,CAAoCJ,kBAApC,EAAwDH,cAAxD,CAAvB,CAFA,CAGA;;IACAI,IAAI,GAAGE,QAAQ,CAACF,IAAhB;IACAC,MAAM,GAAGC,QAAQ,CAACD,MAAT,GAAkBV,SAAS,CAACW,QAAQ,CAACD,MAAV,CAA3B,GAA+CG,SAAxD;EACH,CAND,CAME,OAAOC,CAAP,EAAU;IACRC,OAAO,CAACC,KAAR,CAAcF,CAAC,CAACG,MAAF,EAAd;IACAP,MAAM,GAAGI,CAAT;EACH;;EAED,OAAO;IAACL,IAAD;IAAOC;EAAP,CAAP;AACH,CAjBA"},"metadata":{},"sourceType":"module"}